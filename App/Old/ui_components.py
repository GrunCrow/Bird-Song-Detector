# ui_components.py

import os
from gradio import Blocks, Markdown, SelectData, Row, HTML
import requests
import pandas as pd

from audio_processing import list_audio_files_from_folder

# Caching
from functools import lru_cache

from config import CURRENT_VERSION, GITHUB_REPO
from audio_processing import update_audio_and_image

# Global variables
from config import Globals

def get_sample_audio_and_image():
    sample_audio_files = list_audio_files_from_folder(Globals.get_sample_audio_dir() + os.sep + Globals.get_current_specie_name())
    if sample_audio_files:
        sample_audio, sample_image = update_audio_and_image(sample_audio_files[0])
    else:
        sample_audio = None
        sample_image = None
        print("No audio files found for the selected species")

    Globals.set_current_sample_audio_file(sample_audio)

    return sample_audio, sample_image

# Diccionario global para almacenar los estilos de las filas
row_styles = {}

def check_for_updates():
    url = f"https://api.github.com/repos/{GITHUB_REPO}/releases/latest"
    response = requests.get(url)
    if response.status_code == 200:
        latest_release = response.json()
        latest_version = latest_release["tag_name"]
        if latest_version != CURRENT_VERSION:
            return f"A new version {latest_version} is available! Please update."
    return "You are using the latest version."

def build_footer():
    update_message = check_for_updates()
    with Row():
        Markdown(
            f"""
            <div style='display: flex; justify-content: space-around; align-items: center; padding: 10px; text-align: center'>
                <div>
                    <div style="display: flex;flex-direction: row;">
                        GUI version:&nbsp;<span id="current-version">{CURRENT_VERSION}</span>
                        <span id="update-available" style="display: {'inline' if 'new version' in update_message else 'none'}; color: red; margin-left: 10px;">
                            <a href="https://github.com/{GITHUB_REPO}/releases/latest" target="_blank">Update available!</a>
                        </span>
                    </div>
                </div>
            </div>
            """
        )

def tutorial_tab():
    """
    Generate the tutorial tab content.

    Returns:
    gr.Blocks: The tutorial tab content.
    """
    with Blocks() as tutorial:
        Markdown("""
        # Tutorial

        ## Purpose of the Application
        The BirdNET Predictions Validator App is designed to help validate bird species predictions generated by BirdNET. This tool allows users to view and listen to audio segments and record the accuracy of predictions in a downloadable CSV file.

        ## How to Use the Application

        ### Load Audios
        1. Navigate to the "Load Audios" tab.
        2. Select "Files" or "Folder" and click "Browse" to upload your audio files.

        ### Validate Predictions
        1. Go to the "Validate BirdNET predictions" tab.
        2. Select an audio file from the table.
        3. View the mel spectrogram and listen to the audio.
        4. Use the "Specie", "Other", and "Unknown" buttons to validate the predictions.
        5. If necessary, enter a suggested species and click "Suggested Specie".

        ### Save and Load Validations
        1. To save the validations, click "Save Table".
        2. To load previous validations from a CSV file, click "Load CSV and Copy Validation".
                    
        ## Video Tutorial
        
        """)

        embed_html = '<iframe width="560" height="315" src="https://www.youtube.com/embed/BJYW3RqA2uQ?si=SVWU3tZrFiRqfVuD" title="Tutorial" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>'
        HTML(embed_html)

    return tutorial